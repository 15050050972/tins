program = importStmt | varDef | structDef | funcDef

importStmt = IMPORT ID '.' ID '.' ID

varDef = TYPE ID '=' expr | arrDef
arrDef = TYPE[expr][expr] ID '=' arrExpr

structDef = STRUCT ID '{' varDef '}'

funcDef = TYPE ID funcParam compoundStmt

funcParam = '(' TYPE ID, TYPE ...ID ')'

stmt = ifStmt
     | whileStmt
     | forStmt
     | breakStmt
     | continueStmt
     | returnStmt
     | expr
     | compoundStmt

compoundStmt = { stmt }

(* 表达式解析 *)
expr = assignExpr

(* TODO: assignExpr -> factorExpr OP_ASSIGN assignExpr *)
assignExpr = condExpr OP_ASSIGN assignExpr
           | condExpr

(* 字符串运算的+=特殊处理 *)
OP_ASSIGN = '='
          | '+='
          | '-='
          | '*='
          | '/='
          | '%='
          | '&='
          | '|='
          | '^='
          | '<<='
          | '>>='

condExpr = logicOrExpr '?' assignExpr ':' condExpr
         | logicOrExpr

logicOrExpr = logicOrExpr '||' logicAndExpr
            | logicAndExpr

logicAndExpr = logicAndExpr '&&' bitOrExpr
             | bitOrExpr

bitOrExpr = bitOrExpr
          | bitXorExpr
          | bitXorExpr

bitXorExpr = bitXorExpr '^' bitAndExpr
           | bitAndExpr

bitAndExpr = bitAndExpr '&' equalityExpr
           | equalityExpr

equalityExpr = equalityExpr '==' relationExpr
             | equalityExpr '!=' relationExpr
             | relationExpr

relationExpr = shiftExpr '>' shiftExpr
             | shiftExpr '>=' shiftExpr
             | shiftExpr '<' shiftExpr
             | shiftExpr '<=' shiftExpr
             | shiftExpr

shiftExpr = shiftExpr '<<' addOrSubExpr
          | shiftExpr '>>' addOrSubExpr
          | addOrSubExpr

addOrSubExpr = addOrSubExpr '+' mulOrDivExpr
             | addOrSubExpr '-' mulOrDivExpr
             | mulOrDivExpr

mulOrDivExpr = mulOrDivExpr '*' suffixUnaryExpr
             | mulOrDivExpr '/' suffixUnaryExpr
             | suffixUnaryExpr

suffixUnaryExpr = prefixUnaryExpr '++'
                | prefixUnaryExpr '--'
                | prefixUnaryExpr

prefixUnaryExpr = '~' prefixUnaryExpr
                | '!' prefixUnaryExpr
                | '++' factorExpr
                | '--' factorExpr
                | '-' factorExpr
                | castExpr
                | factorExpr

castExpr = '(' TYPE ')' prefixUnaryExpr

factorExpr = factorExpr '.' factorExpr
           | factorExpr '[' expr ']'
           | callFuncExpr
           | ID
           | primary
           | '(' expr ')'

(* 不可分割，不可链式操作 *)
primary = NUM_VAL | STRING_VAL | CHAR_VAL | DOUBLE_VAL | FLOAT_VAL
            | arrExpr | structExpr

callFuncExpr = ID '(' param ')'

arrExpr = '[' (expr ',')* ']'
structExpr = '{' (ID ':' expr ',')* '}'