program = importStmt | varDefStmt | funcDef

(* import语句不可换行 *)
importStmt = IMPORT ID.ID.ID

varDef = TYPE ID
       | TYPE[] ID '=' expr

structDef = STRUCT ID '{' varDef, funcDef '}'

funcDef = TYPE ID funcParam funcBody

funcParam = '(' TYPE ID, ',', TYPE ID ')'

funcBody = stmt

stmt = ifStmt
     | whileStmt
     | forStmt
     | switchStmt
     | breakStmt
     | continueStmt
     | returnStmt
     | expr
     | emptyStmt

(* 表达式解析 *)
expr = assignExpr

(* TODO: assignExpr -> factorExpr OP_ASSIGN assignExpr *)
assignExpr = condExpr OP_ASSIGN assignExpr
           | condExpr

(* 字符串运算的+=特殊处理 *)
OP_ASSIGN = '='
          | '+='
          | '-='
          | '*='
          | '/='
          | '%='
          | '&='
          | '|='
          | '^='
          | '<<='
          | '>>='

condExpr = logicOrExpr ? assignExpr : condExpr
         | logicOrExpr

logicOrExpr = logicOrExpr '||' logicAndExpr
            | logicAndExpr

logicAndExpr = logicAndExpr '&&' bitOrExpr
             | bitOrExpr

bitOrExpr = bitOrExpr
          | bitXorExpr
          | bitXorExpr

bitXorExpr = bitXorExpr '^' bitAndExpr
           | bitAndExpr

bitAndExpr = bitAndExpr '&' equalityExpr
           | equalityExpr

equalityExpr = equalityExpr '==' relationExpr
             | equalityExpr '!=' relationExpr
             | relationExpr

relationExpr = shiftExpr '>' shiftExpr
             | shiftExpr '>=' shiftExpr
             | shiftExpr '<' shiftExpr
             | shiftExpr '<=' shiftExpr
             | shiftExpr

shiftExpr = shiftExpr '<<' addOrSubExpr
          | shiftExpr '>>' addOrSubExpr
          | addOrSubExpr

addOrSubExpr = addOrSubExpr '+' mulOrDivExpr
             | addOrSubExpr '-' mulOrDivExpr
             | mulOrDivExpr

mulOrDivExpr = mulOrDivExpr '*' suffixUnaryExpr
             | mulOrDivExpr '/' suffixUnaryExpr
             | suffixUnaryExpr

suffixUnaryExpr = prefixUnaryExpr '++'
                | prefixUnaryExpr '--'
                | prefixUnaryExpr

prefixUnaryExpr = '-' factorExpr
                | '~' prefixUnaryExpr
                | '++' factorExpr
                | '--' factorExpr
                | '!' prefixUnaryExpr
                | '(' TYPE ')' prefixUnaryExpr
                | factorExpr

factorExpr = factorExpr '.' ID
           | factorExpr '[' expr ']'
           | callFuncExpr
           | ID
           | NUM_VAL | STRING_VAL | CHAR_VAL | DOUBLE_VAL | FLOAT_VAL
           | (expr)

callFuncExpr = ID '(' param ')'
